#!/bin/bash
# Script to fetch constants from the website repo. 

set -e
WEBSITE_REPO="https://github.com/momentum-mod/website"

if [[ $PWD == */panorama/tools ]]; then
  cd ../
fi

if [ ! -f package.json ] && [[ $PWD != */panorama ]]; then
  echo "Doesn't look like we're in the panorama directory, exiting"
  exit 1
fi

rm -rf ./constants-tmp
rm -rf ./website-tmp

if [ "$1" == "-b" ] || [ "$1" == "" ]; then
  echo "Fetching constants from website repo..."
  if [ "$1" == "-b" ]; then
   git clone -b "$2" $WEBSITE_REPO ./website-tmp 
  else
    git clone $WEBSITE_REPO ./website-tmp
  fi 
  
  mv ./website-tmp/libs/constants/src/ ./constants-tmp
  mv ./website-tmp/libs/enum/src/enum.ts ./enum-tmp.ts
  rm -rf ./website-tmp
elif [ "$1" == "-l" ]; then
  echo "Copying constants from local path"
  cp -r "$2"/libs/enum/src/enum.ts ./enum-tmp.ts
  cp -r "$2"/libs/constants/src ./constants-tmp
elif [ "$1" == "-h" ]; then
  echo "usage: fetch-web.sh [-b branch] [-l local-path] [-h]"
  exit 0
fi

cd ./constants-tmp || exit 1
rm index.ts types/models/prisma-correspondence.ts

echo "Generating web_dontmodifyme.ts"
printf "/**
 * @file
 * !! Do not edit this file directly! This is generated from contents of the web
 * !! repository. If you really need to change something, make the change in the
 * !! web repository and run \`npm run fetch-web\`.
 *
 * Collection of constant values and types shared between the
 * https://github.com/momentum-mod/website monorepo and Panorama, containing:
 * - Types: TypeScript types and interfaces, primarily for modeling the DTOs
 *   (data transfer objects) returned by the backend.
 *   The C++ equivalents of these live in mom_api_models.h.
 * 	 See https://staging-api.momentum-mod.org/docs Schemas section, for
 * 	 detailed descriptions of every model/DTO.
 * - Enums: TypeScript enums for everything the backend uses.
 *   The C++ equivalents of these mostly live in mom_api_shareddefs.h.
 * - Maps: Readonly KV maps, usually associating enum values with extra data,
 *   e.g. gamemodes to their names, prefixes, icons etc...
 *   We use Maps instead of Objects since JavaScript object keys can only be
 *   strings or symbols, and most of our enum values are numbers.
 *
 * These are fetched from https://github.com/momentum-mod/website/tree/main/libs/constants
 * to maintain a single source of truth across our TypeScript projects. Things
 * unique to Panorama don't need to live here, they can be defined in other
 * files in this codebase.
 */
/* eslint-disable */
// Stub any broswer/node types we don't actually use:
type File = never;

" > ../web_dontmodifyme.ts

for file in **/*.ts **/*/*.ts; do
  sed -z 's/import[^;]*;\n*//g' "$file" |
  sed -zE 's/\/\/ *TODO[^\n]*\n//g' | 
  grep -vE '// ?prettier-ignore' >> ../web_dontmodifyme.ts
  printf "\n" >> ../web_dontmodifyme.ts
done

cd ../

echo "Generating enum.ts"
printf "
/**
 * @file
 * !! Do not edit this file directly! This is generated from contents of the web
 * !! repository. If you really need to change something, make the change in the
 * !! web repository and run \`npm run fetch-web\`.
 *
 * Utility functions for working with TypeScript enums. TL;DR: if you want to iterate over an enum, use
 * fastValuesNumeric or fastValuesString.
 *
 * TypeScript enums at runtime are *basically* objects, however *numeric* enums have a weird reverse mapping behaviour.
 * This enum produces TypeScript code that's functionally equivalent to the object below it:
 * \`\`\`ts
 * enum TSEnum {
 * 	Bar = 1,
 * 	Baz = 2
 * }
 *
 * const JSObject = {
 * 	'1': 'Bar',
 * 	'2': 'Baz',
 * 	Bar: 1,
 * 	Baz: 2,
 * }
 * \`\`\`
 * Note that the keys on JSObject have been stringified, as per all JS objects.
 *
 * For string enums they're effectively just objects, e.g.  
 * \`\`\`ts
 * enum TSEnum {
 * 	Foo = 'foo',
 * 	Bar = 'bar'
 * }
 * 
 * const JSObject = {
 * 	Foo: 'foo',
 * 	Bar: 'bar'
 * }
 * \`\`\`
 * 
 * For enums containing both strings and numbers, the numbers are reverse mapped, strings are not. Horrible!
 *
 * This property makes iterating over enums at runtime very annoying. Enums are sometimes twice the size you expect,
 * and iterating using Object.keys/values/entries will contain undesired cases.
 * 
 * This library provides methods akin to Object.length, Object.keys, Object.values and Object.entries for enums.
 * Whilst you *can* use Object.keys etc. for string enums, I'd recommend using these functions explicitly.
 * 
 * The fast variants of the functions here are safe to use, but note that they rely on the exact structure of the object
 * the TypeScript compiler produces, and that V8 preserves the order of properties on an Object (afaik not required by
 * ECMAScript spec). There's a small chance in the future that upgrading the \`typescript\` dependency or
 * using a different TypeScript compiler would break these functions.
 */
 " > ./enum.ts
 
cat ./enum-tmp.ts >> ./enum.ts

echo "Running prettier"
npx prettier --write {web_dontmodifyme,enum}.ts

echo "Moving generated files to scripts/common/"
mv ./web_dontmodifyme.ts ./scripts/common/
mv ./enum.ts ./scripts/util/

echo "Cleaning up loose files"
rm -rf ./constants-tmp
rm ./enum-tmp.ts

echo "Creating Git commit"
git reset
git add ./scripts/common/web_dontmodifyme.ts ./scripts/util/enum.ts
git commit -m 'chore: update website dependencies' --no-verify

echo "Done!"

