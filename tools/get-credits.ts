// USAGE: npm run get-credits
// Sibling to this script lives in frontpage repo fetch-credits.ts

import Papa from 'papaparse';
import prettier from 'prettier';
import * as fs from 'node:fs';

const BASE_URL =
	'https://docs.google.com/spreadsheets/d/e/2PACX-1vQ7185y3UAgXH_sHrR98VXNXFoKIeBOhdSgFZS1dR9oi1eTR_rGEVsWXO_5sfidmdk0qlDxjMxKI1aj';

// Get from File -> Shared -> Publish to the web
const GIDS = {
	Team: 0,
	Emeritus: 1612846965
};

const PATH = process.env['npm_package_config_baseDir'] + 'layout/pages/drawer/credits.xml';

interface Credit {
	id: string;
	username: string;
	name?: string;
	type: CreditType;
	roles?: string;
	pronouns?: string;
	bio?: string;
	discord?: string;
	steam?: string;
	email?: string;
	github?: string;
}

enum CreditType {
	PROJECT_LEAD = 'project-lead',
	DEPARTMENT_HEAD = 'dept-head',
	TEAM = 'team',
	EMERITUS = 'emeritus'
}

const CreditTypeProps = {
	[CreditType.PROJECT_LEAD]: {
		title: '#Credits_MomentumTeam'
	},
	[CreditType.DEPARTMENT_HEAD]: {
		title: '#Credits_ProjectLead'
	},
	[CreditType.TEAM]: {
		title: '#Credits_Team'
	},
	[CreditType.EMERITUS]: {
		title: '#Credits_PastTeamMembers'
	}
};

const CREDITS_CLASS = 'about-credits';

async function fetchTable(gid: number): Promise<Credit[]> {
	const res = await fetch(`${BASE_URL}/pub?gid=${gid}&single=true&output=csv`);
	const text = await res.text();
	return Papa.parse(text, { header: true })
		.data.filter(({ username }) => username)
		.map((item: Credit) => ({
			id: item.username.replace(' ', ''),
			...item
		}));
}

function chunk<T>(array: T[], size: number): T[][] {
	return Array.from({ length: Math.ceil(array.length / size) }, (_, i) => array.slice(i * size, i * size + size));
}

function label(credit: Credit): string {
	return `
		<Label
			id="${credit.id}"
			class="${CREDITS_CLASS}__col ${CREDITS_CLASS}__name ${CREDITS_CLASS}__name--${credit.type}"
			text="${credit.username}"
			username="${credit.username}"
			name="${credit.name || ''}"
			section="${credit.type}"
			roles="${credit.roles || ''}"
			pronouns="${credit.pronouns || ''}"
			bio="${credit.bio.replaceAll('\n', '#newline#') || ''}"
			steamID="${credit.steam || ''}"
			discord="${credit.discord || ''}"
			email="${credit.email.replace('@', 'EMMMAAAIIIILLLL') || ''}"
			github="${credit.github || ''}"
			html="true"
		/>`.replace('\n', ' ');
}

function section(type: CreditType, credits: Credit[], columns = 5): string {
	return `
		<Label class="${CREDITS_CLASS}__subheader" text="${CreditTypeProps[type].title}" />
		${chunk(credits, columns)
			.map(
				(row) => `
				<Panel class="${CREDITS_CLASS}__row">
					${row.map((credit) => label(credit)).join('\n')}
				</Panel>
			`
			)
			.join('\n')}
	`;
}

(async () => {
	const fetched = await Promise.all(Object.values(GIDS).map((url) => fetchTable(url)));
	const grouped = Object.groupBy(fetched.flat(), ({ type }) => type);
	const xml = `
	<root>
		<!-- Generated by panorama/tools/get-credits.ts -->
		<styles>
			<include src="file://{resources}/styles/main.scss" />
		</styles>

		<Panel>
			${Object.entries(grouped)
				.map(([type, data]) => section(type as CreditType, data))
				.join('\n')}
		</Panel>
	</root>
	`;

	let outString = await prettier.format(xml, {
		parser: 'html',
		printWidth: 10000,
		useTabs: true
	});

	outString = outString.replaceAll('<label', '<Label').replaceAll('&', '&amp;');

	fs.writeFileSync(PATH, outString);

	console.log(`Wrote ${PATH} successfully.`);
})();
